DEBUT(
      LANG='EN',
      PAR_LOT='NON',
      INFO=1,
     );

from pprint import pprint as pp

# Define material
STEEL   =DEFI_MATERIAU(
                       ELAS=_F(
                               E = 2.1e11,
                               NU = 0.3,
                              ),
                      );

mesh_nums ={
    20 : ["cfa-coarse-lin-hex"], 
    21 : ["cfa-coarse-lin-tet"],
    22 : ["cfa-coarse-quad-hex"],
    23 : ["cfa-coarse-quad-tet"],
    24 : ["cfa-fine-lin-hex"],
    25 : ["cfa-fine-lin-tet"],
    26 : ["cfa-fine-quad-hex"],
    27 : ["cfa-fine-quad-tet"]
    }
mesh_list = [None] * len(mesh_nums.keys())

# Iterate for all meshes defined in astk with UNITE consistence with mesh_nums dictionary.
for ind, mesh_num in enumerate(mesh_nums.keys()):

    # Load mesh file
    mesh_list[ind] = LIRE_MAILLAGE(
                                   UNITE=mesh_num, 
                                   FORMAT='IDEAS'
                                  );  			

    # Create groups of nodes according to all groups of elements
    # Additionally create group with one node for comparison the results
    mesh_list[ind] = DEFI_GROUP(
                                reuse = mesh_list[ind],
                                MAILLAGE = mesh_list[ind],
                                CREA_GROUP_NO=(
                                               _F(TOUT_GROUP_MA = 'OUI',),
                                               _F(
                                                  NOM = 'D',
                                                  OPTION = 'ENV_SPHERE',
                                                  POINT = (2.0, 0.0, 0.6),
                                                  RAYON = 0.02,
                                                  PRECISION = 0.02
                                                 ),
                                              ),		
                               );

    # Change orientation of solids "peel" 
    mesh_list[ind] = MODI_MAILLAGE(
                                   reuse = mesh_list[ind],
                                   MAILLAGE = mesh_list[ind],
                                   ORIE_PEAU_3D = _F(GROUP_MA = 'E_2_DIST'),
                                  );

    # Define analysis type
    Model = AFFE_MODELE(
                        MAILLAGE = mesh_list[ind],
                        AFFE = _F(
                                  TOUT = 'OUI',
                                  PHENOMENE = 'MECANIQUE',
                                  MODELISATION = '3D',		
                                 ),
                       );


    # Assign material to mesh and model
    Mater = AFFE_MATERIAU(
                          MAILLAGE = mesh_list[ind],
                          AFFE = _F(
                                    TOUT = 'OUI',	
                                    MATER = STEEL,
                                   ),
                         );

    # Get list with names of nodes groups (node-sets)
    no_groups_names = mesh_list[ind].getGroupsOfNodes()
    
    # Find '_DC' name (C_A do not accept comprehension lists)
    for uy in no_groups_names:
        if uy.endswith('_DC'):            
            Uy_group_name = uy
            print(f"Uy_group_name: {Uy_group_name}")

    # Find '_MID' name (C_A do not accept comprehension lists)
    for uz in no_groups_names:
        if uz.endswith('_MID'):            
            Uz_group_name = uz
            print(f"Uz_group_name: {Uz_group_name}")

    # Define boundaries
    Bound = AFFE_CHAR_MECA(
                           MODELE = Model,
                           DDL_IMPO = (
                                       _F(GROUP_NO = Uz_group_name, DZ = 0.0,),	
                                       _F(GROUP_NO = 'N_2_AB', DX = 0.0,),	
                                       _F(GROUP_NO = Uy_group_name, DY = 0.0,),					  
                                       _F(GROUP_NO = 'N_3_BC', DX = 0.0, DY = 0.0,),	
                                      ),
                            PRES_REP = _F(GROUP_MA = 'E_2_DIST', PRES = 1.0e6),
                          );

    # Solve
    Results = MECA_STATIQUE(      
                            MODELE = Model,
                            CHAM_MATER = Mater,
                            EXCIT = _F(CHARGE = Bound,),
                           );

    # Calculate the field of stresses extrapolated from Gauss point to nodes in Cartesian CS
    Results	= CALC_CHAMP(
                         reuse = Results,
                         RESULTAT = Results,
                         TOUT = 'OUI',
                         CONTRAINTE = 'SIGM_NOEU',
                        );

    # Extract value of normal stress in Y direction extrapolated to node D
    ResD = POST_RELEVE_T(
                         ACTION=(
                                 _F(
                                    INTITULE = 'Stress SIYY in point D',
                                    OPERATION = 'EXTRACTION',
                                    RESULTAT = Results,
                                    NOM_CHAM = 'SIGM_NOEU',
                                    NOM_CMP = ('SIYY'),
                                    GROUP_NO = 'D',
                                   ),
                                ),
                        );

    # Extract table to python object and save the value to dictionary
    resi=ResD.EXTR_TABLE()
    mesh_nums[mesh_num].append("{:e}".format(resi.SIYY.values()[0]))

    # Additionally prepare mesh output enriched with fields of displacement, stresses in gauss points, and  stresses extrapolated to nodes
    IMPR_RESU(
              FORMAT = 'MED',
              UNITE = 80,
              RESU = _F(
                        MAILLAGE = mesh_list[ind],
                        RESULTAT = Results,		  
                        NOM_CHAM = ('DEPL', 'SIEF_ELGA','SIGM_NOEU'),                   
                       ),
             );

# Pretty print the dictionary with stresses
print("Results:")
pp(mesh_nums)
FIN();
